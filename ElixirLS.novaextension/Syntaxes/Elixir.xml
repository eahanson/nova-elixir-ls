<?xml version="1.0" encoding="UTF-8"?>
<syntax name="elixir">
    <meta>
        <name>Elixir</name>
        <type>script</type>
        <preferred-file-extension>ex</preferred-file-extension>
        <scriptable shebang="#!/usr/bin/env elixir" />
    </meta>
    
    <tree-sitter>
        <highlights />
        <folds />
        <injections />
        <symbols />
    </tree-sitter>

    <detectors>
        <extension priority="1.0">ex,exs</extension>
        <filename priority="1.0">mix.lock</filename>
        <match-content lines="2" priority="1.0">\#\s*\-\*\-\s*mode:\s*elixir\b</match-content>
        <match-content lines="5" priority="1.0">^#\s*vi:\s*(syntax|ft)=(elixir)\b</match-content>
        <match-content lines="2" priority="0.7">\#\!.*?\belixir\b</match-content>
    </detectors>
    
    <indentation>
        <increase>
            <expression>else|->|\{|do\b</expression>
        </increase>
        <decrease>
            <expression>end|else|\}\s</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>#</expression>
        </single>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&lt;&lt;" close="&gt;&gt;" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="heex" />
        <include syntax="self" collection="comments" />
        <include syntax="self" collection="definitions" />
        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="blocks" />
        <include syntax="self" collection="imports" />
        <include syntax="self" collection="strings" />
        <include syntax="self" collection="values" />
        <include syntax="self" collection="identifiers" />
        <include syntax="self" collection="syntax" />
    </scopes>
    
    <collections>
        <!-- Embedded Heex -->
        <collection name="heex">
            <scope name="heex">
                <starts-with>
                    <expression>~H"""</expression>
                    <capture number="0" name="eex.tag.framework.expression.start" />
                </starts-with>
                <ends-with>
                    <expression>"""</expression>
                    <capture number="0" name="eex.tag.framework.expression.end" />
                </ends-with>
                <subsyntax name="html+eex">
                    <cut-off>
                        <expression>"""</expression>
                    </cut-off>
                </subsyntax>
            </scope>
        </collection>
    
        <!-- Comments -->
        <collection name="comments">
            <scope name="elixir.comment.single" spell-check="true">
                <expression>\#(.*)$</expression>
                <capture number="1" name="elixir.comment.content" />
            </scope>
            <scope name="elixir.comment.docstring">
                <starts-with>
                    <expression>@(doc|moduledoc)\s+&quot;&quot;&quot;</expression>
                    <capture number="1" name="elixir.identifier.cdocstring" />
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
        </collection>
        
        <!-- Imports -->
        <collection name="imports">
            <scope name="elixir.import">
                <starts-with>
                    <expression>\b(alias|import|require|use)\b</expression>
                    <capture number="1" name="elixir.keyword.statement" />
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                </ends-with>
                <subscopes>
                    <scope name="elixir.keyword">
                        <expression>as:</expression>
                    </scope>
                    <scope name="elixir.import.identifier.symbol">
                        <symbol type="package" scope="external" />
                        <expression>([a-zA-Z][a-zA-Z0-9\-_\.]+)</expression>
                        <capture number="0" name="elixir.import.identifier.type.package" />
                    </scope>
                    <scope name="elixir.separator">
                        <expression>,</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <!-- Blocks -->
        <collection name="blocks">
            <scope name="elixir.block">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\bdo$</expression>
                    <capture number="0" name="elixir.keyword" />
                </starts-with>
                <ends-with>
                    <expression>\bend\b</expression>
                    <capture number="0" name="elixir.keyword" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="heex" />
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="definitions" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="imports" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
            <scope name="elixir.block.inline">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\bdo:</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>$</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="definitions" />
                    <include syntax="self" collection="keywords" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="imports" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Definitions -->
        <collection name="definitions">
            <!-- Modules -->
            <scope name="elixir.definition.class">
                <symbol type="function">
                    <context behavior="subtree" foldable="false" />
                </symbol>
                <starts-with>
                    <expression>(defmodule)\s+([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_\.]*)</expression>
                    <capture number="1" name="elixir.keyword.construct" />
                    <capture number="2" name="elixir.identifier.type.class.name" />
                </starts-with>
                <ends-with>
                    <expression>(?&lt;=end)</expression>
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="blocks" />
                </subscopes>
            </scope>


            <!-- Anonymous Function -->
            <scope name="elixir.definition.function.anonymous">
                <symbol type="function">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>(fn)\b</expression>
                    <capture number="1" name="elixir.keyword.construct" />
                </starts-with>
                <ends-with>
                    <expression>(end)\b</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" />
                </subscopes>
            </scope>

            <!-- Functions -->
            <scope name="elixir.definition.function">
                <symbol type="function">
                    <context behavior="subtree" foldable="false" />
                </symbol>
                <starts-with>
                    <expression>(def|defp)\s+([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)</expression>
                    <capture number="1" name="elixir.keyword.construct" />
                    <capture number="2" name="elixir.identifier.function.name" />
                </starts-with>
                <ends-with>
                    <expression>(?&lt;=end)|$</expression>
                </ends-with>
                <subscopes>
                    <cut-off>
                        <expression>(?=do:)</expression>
                    </cut-off>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="arguments" />
                </subscopes>
            </scope>
            
            <!-- Macros -->
            <scope name="elixir.definition.function.macro">
                <symbol type="function">
                    <context behavior="subtree" foldable="false" />
                </symbol>
                <starts-with>
                    <expression>(defmacro)\s+([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)</expression>
                    <capture number="1" name="elixir.keyword.construct" />
                    <capture number="2" name="elixir.identifier.function.name" />
                </starts-with>
                <ends-with>
                    <expression>(?&lt;=end)</expression>
                </ends-with>
                <subscopes>
                    <cut-off>
                        <expression>(?=do:)</expression>
                    </cut-off>
                    <include syntax="self" collection="comments" />
                    <include syntax="self" collection="blocks" />
                    <include syntax="self" collection="arguments" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Arguments -->
        <collection name="arguments">
            <scope name="elixir.arguments">
                <include syntax="self" collection="comments" />
                <starts-with>
                    <expression>\(</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="comments" />
                    <scope name="elixir.separator">
                        <expression>,</expression>
                    </scope>
                    <scope name="elixir.identifier.argument.name">
                        <symbol type="argument" />
                        <expression>(?&lt;!\=)\b[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*\b</expression>
                    </scope>
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Keywords -->
        <collection name="keywords">
            <scope name="elixir.keyword.construct">
                <strings>
                    <string>fn</string>
                    <string>defdelegate</string>
                    <string>defstruct</string>
                    <string>defprotocol</string>
                    <string>defimpl</string>
                    <string>defrecord</string>
                    <string>defrecordp</string>
                    <string>defcallback</string>
                    <string>defexception</string>
                    <string>defoverridable</string>
                    <string>defguard</string>
                    <string>defguardp</string>
                    <string>quote</string>
                    <string>unquote</string>
                    <!-- testing -->
                    <string>describe</string>
                    <string>test</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.condition">
                <strings>
                    <string>case</string>
                    <string>cond</string>
                    <string>if</string>
                    <string>unless</string>
                    <string>when</string>
                    <string>else</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.statement">
                <strings>
                    <string>try</string>
                    <string>catch</string>
                    <string>rescue</string>
                    <string>raise</string>
                    <string>throw</string>
                    <string>exit</string>
                    <string>for</string>
                    <string>with</string>
                    <string>receive</string>
                    <!-- testing -->
                    <string>assert</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.operator">
                <strings>
                    <string>and</string>
                    <string>or</string>
                    <string>not</string>
                    <string>in</string>
                    <string>after</string>
                </strings>
            </scope>
            <scope name="elixir.keyword.self">
                <strings>
                    <string>super</string>
                </strings>
            </scope>
        </collection>
        
        <!-- Values -->
        <collection name="values">
            <include syntax="self" collection="strings" />
            <scope name="elixir.value.null">
                <strings>
                    <string>nil</string>
                </strings>
            </scope>
            <scope name="elixir.value.boolean">
                <strings>
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <scope name="elixir.value.symbol">
                <expression>:[A-Za-z][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*</expression>
            </scope>
            <scope name="elixir.value.number.binary">
                <expression>\b[-+]?0b[01](?:[01]|[_01])*\b</expression>
            </scope>
            <scope name="elixir.value.number.octal">
                <expression>\b[-+]?0o[0-7](?:[0-7]|[_0-7])*\b</expression>
            </scope>
            <scope name="elixir.value.number.hex">
                <expression>\b[-+]?0x[0-9a-fA-F](?:[0-9a-fA-F]|_[0-9a-fA-F])*\b</expression>
            </scope>
            <scope name="elixir.value.number.float">
                <expression>\b[-+]?\d(?:\d|_\d)*\.\d(?:\d|_\d)*(?:[eE][-+]?\d(?:\d|_\d)*)?\b</expression>
            </scope>
            <scope name="elixir.value.number.decimal">
                <expression>\b[-+]?\d(?:\d|_\d)*\b</expression>
            </scope>
        </collection>
        
        <!-- Strings -->
        <collection name="strings">
            <scope name="elixir.string.block" spell-check="true">
                <symbol type="comment">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>&quot;&quot;&quot;</expression>
                </starts-with>
                <ends-with>
                    <expression>&quot;&quot;&quot;</expression>
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.slash">
                <starts-with>
                    <expression>(~[a-z])(\/)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(\/)([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.pipe">
                <starts-with>
                    <expression>(~[a-z])(\|)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(\|)([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.quot">
                <starts-with>
                    <expression>(~[a-z])(&quot;)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(&quot;)([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.apos">
                <starts-with>
                    <expression>(~[a-z])(&apos;)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(&apos;)([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.paren">
                <starts-with>
                    <expression>(~[a-z])(\()</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(\))([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.brace">
                <starts-with>
                    <expression>(~[a-z])(\[)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(\])([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.curly">
                <starts-with>
                    <expression>(~[a-z])(\{)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(\})([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.sigil.block.chevron">
                <starts-with>
                    <expression>(~[a-z])(&lt;)</expression>
                    <capture number="1" name="elixir.string.block.modifier" />
                    <capture number="2" name="elixir.string.block.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(&gt;)([a-z]+)?</expression>
                    <capture number="1" name="elixir.string.block.delimiter" />
                    <capture number="2" name="elixir.string.block.modifier" />
                </ends-with>
            </scope>
            <scope name="elixir.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="elixir.string.double-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(?:[^&quot;\\]|\\.)*(&quot;|$)</expression>
                    <capture number="1" name="elixir.string.double-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="variable-substitution" />
                </subscopes>
            </scope>
            <scope name="elixir.string.single-quoted">
                <starts-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="elixir.string.single-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>(?:[^&apos;\\]|\\.)*(&apos;|$)</expression>
                    <capture number="1" name="elixir.string.single-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="variable-substitution" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Arguments -->
        <collection name="arguments">
            <scope name="elixir.arguments">
                <include syntax="self" collection="comments" />
                <starts-with>
                    <expression>\(</expression>
                    <capture number="0" name="elixir.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="elixir.bracket" />
                </ends-with>
                <subscopes>
                    <cut-off>
                        <expression>(?=\b(?:function|class|if|else|while|for)\b)</expression>
                    </cut-off>
                    <include syntax="self" collection="comments" />
                    <scope name="elixir.separator">
                        <expression>,</expression>
                    </scope>
                    <scope name="javascript.identifier.argument.name">
                        <symbol type="argument" />
                        <expression>(?&lt;!\=)\b[a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*\b</expression>
                    </scope>
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="syntax" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Identifiers -->
        <collection name="identifiers">
            <scope name="elixir.identifier.key">
                <expression>([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_\?]*):</expression>
            </scope>
            <scope name="elixir.identifier.type.class">
                <expression>\b[A-Z]([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*)\b</expression>
            </scope>
            <scope name="elixir.identifier.function">
                <expression>([a-zA-Z_][A-Za-zÀ-ÖØ-öø-ÿ0-9_]*[?!]?)(?=\()</expression>
            </scope>
            <scope name="elixir.function.typespec">
                <expression>@(spec)\s+.$</expression>
                <capture number="1" name="elixir.identifier.typespec" />
            </scope>
        </collection>
        
        <!-- Syntax -->
        <collection name="syntax">
            <scope name="elixir.bracket">
                <expression>[\(\[\{\)\]\}]</expression>
            </scope>
            <scope name="elixir.operator">
                <expression>(\+|\-|\*|\*\*|/|%|\=|\=\=|\=~|!\=|\+\=|\-\=|\*\=|/\=|%\=|\*\*=|\&lt;|\&gt;|\&lt;\=|\&gt;=|\&lt;\=\&gt;|\=\=\=|\||\^|&amp;|\&lt;\&lt;|\&gt;\&gt;|~)</expression>
            </scope>
        </collection>
    </collections>
</syntax>
